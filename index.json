[{"content":"This will contain info about my Proxmox server\n","permalink":"https://MParnin.github.io/projects/homelab/","summary":"This will contain info about my Proxmox server","title":"Home Lab"},{"content":"This will contain info about my cloud lab setup.\n","permalink":"https://MParnin.github.io/projects/cloudlab/","summary":"This will contain info about my cloud lab setup.","title":"Cloud Lab Setup"},{"content":"Installing/Updating Hugo Make sure installed version of Go is \u0026gt;= 1.18: Check Go version: go version Install/update Go: https://go.dev/doc/install Check Hugo: hugo version Update Hugo: Download latest version: https://github.com/gohugoio/hugo/releases Install .deb file: sudo dpkg --install ./hugo_0.110.0_linux-amd64.deb Creating a New Site Install Hugo and prerequisites: https://gohugo.io/installation/ Create two repositories on Github: \u0026ldquo;Blog Repository\u0026rdquo; - Repository for storing website code: \u0026ldquo;Blog\u0026rdquo; Make Public, no README, simply click \u0026ldquo;Create repository\u0026rdquo; \u0026ldquo;Production Repository\u0026rdquo; - Repository for deploying website that\u0026rsquo;s hosted through Github Pages: \u0026ldquo;MParnin.github.io\u0026rdquo; Make Public, no README, simply click \u0026ldquo;Create repository\u0026rdquo; Choose theme for site: https://themes.gohugo.io/ (PaperMod was used for this site) Clone \u0026ldquo;Blog\u0026rdquo; to local machine: git clone git@github.com:MParnin/Blog.git Change to \u0026ldquo;Blog\u0026rdquo; directory: cd Blog Create a new Hugo site: hugo new site MParnin.github.io Change to new directory: cd MParnin.github.io Clone theme to newly created boiler plate code for website: git clone https://github.com/adityatelange/hugo-PaperMod themes/PaperMod --depth=1 Setup the config file: Open the config file in a text editor: code config.toml Add the theme to the end of the config file: theme = \u0026quot;PaperMod\u0026quot; Change the title: MP Change the base URL to match Github production repo: baseURL = https://MParnin.github.io/ Save changes and exit code editor Preview site locally: Make sure in directory with config.toml Run Hugo server: hugo server Visit the address of the local site: http://localhost:1313/ (can ctrl-click link in terminal) Stop server when finished viewing: Ctrl+c Test creating a new post: Create file: hugo new posts/hellomom.md Edit file: code /content/posts/hellomom.md Set title of post: title: \u0026quot;Hello Mom!\u0026quot; Delete draft mode line Add content below second \u0026ldquo;\u0026mdash;\u0026rdquo;: Add plaintext: Hey Mom checkout my new site! Add code: 1 print(\u0026#34;Hello Mom!\u0026#34;) Save and exit Add \u0026ldquo;Blog\u0026rdquo; as submodule to store static assets for website: Need one commit for \u0026ldquo;MParnin.github.io\u0026rdquo; repo and set the main branch to \u0026ldquo;main\u0026rdquo;: Make a temp directory to clone repo to: mkdir ~/tmp Change to temp directory: cd ~/tmp Clone Production repository: git clone git@github.com:MParnin/MParnin.github.io.git Change to cloned directory: cd MParnin.github.io Checkout a new branch: git checkout -b main Create a readme file: touch README.md Check status to see untracked files: git status Add new all new files to be tracked: git add . Commit tracked files: git commit -m \u0026quot;Adding README\u0026quot; Push to Main branch on Github: git push origin main Confirm on Github the file was added and branch is set to \u0026ldquo;main\u0026rdquo; Delete temp files: rm -rf tmp Add a git submodule which will reference \u0026ldquo;Production\u0026rdquo; repository: Change to root site directory: cd ~/Documents/Blog/MParnin.github.io Create submodule within root to deploy site from (site deployed from \u0026ldquo;public\u0026rdquo; submodule directory; static files that Hugo generates get added to this directory): git submodule add -b main git@github.com:MParnin/MParnin.github.io.git public Review site before deploying: hugo server Generate static files into \u0026ldquo;public\u0026rdquo;: Change to root site directory: cd ~/Documents/Blog/MParnin.github.io Create files for selected theme: hugo -t PaperMod Confirm files were generated: cd public Confirm origin is directed to Production repository: git remote -v Check status of files: git status Add all static files: git add . Commit static files: git commit -m \u0026quot;Initial commit\u0026quot; Push the origin files to the main branch: git push origin main Confirm all static files are in Production repo on Github. These files are now automatically deployed to https://MParnin.github.io. This site is published because it is hosted through Github Pages which can be seen in \u0026ldquo;Settings \u0026gt; Pages\u0026rdquo; for the Production repositories settings. Creating a New Post Create a new post: Navigate to root of site: cd /Documents/Blog/MParnin.github.io Create new post file: hugo new posts/\u0026lt;name.md\u0026gt; Edit post: code /content/posts/\u0026lt;post-title\u0026gt;.md Set title of post: title: \u0026quot;Hello Mom!\u0026quot; Delete draft mode Save and exit Generate static files into \u0026ldquo;public\u0026rdquo; and push to github to update site: Change to root site directory: cd ~/Documents/Blog/MParnin.github.io Create files for selected theme: hugo -t PaperMod Confirm files were generated: cd public Confirm origin is directed to Production repository: git remote -v Check status of files: git status Add all static files: git add . Commit static files: git commit -m \u0026quot;Initial commit\u0026quot; Push the origin files to the main branch: git push origin main Modifications Moved table of contents to left side of page: Replace the contents of themes/PaperMod/layouts/partials/toc.html with the following (comment out what is currently in the file): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 {{- $headers := findRE \u0026#34;\u0026lt;h[1-6].*?\u0026gt;(.|\\n])+?\u0026lt;/h[1-6]\u0026gt;\u0026#34; .Content -}} {{- $has_headers := ge (len $headers) 1 -}} {{- if $has_headers -}} \u0026lt;aside id=\u0026#34;toc-container\u0026#34; class=\u0026#34;toc-container wide\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;toc\u0026#34;\u0026gt; \u0026lt;details {{if (.Param \u0026#34;TocOpen\u0026#34;) }} open{{ end }}\u0026gt; \u0026lt;summary accesskey=\u0026#34;c\u0026#34; title=\u0026#34;(Alt + C)\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;details\u0026#34;\u0026gt;{{- i18n \u0026#34;toc\u0026#34; | default \u0026#34;Table of Contents\u0026#34; }}\u0026lt;/span\u0026gt; \u0026lt;/summary\u0026gt; \u0026lt;div class=\u0026#34;inner\u0026#34;\u0026gt; {{- $largest := 6 -}} {{- range $headers -}} {{- $headerLevel := index (findRE \u0026#34;[1-6]\u0026#34; . 1) 0 -}} {{- $headerLevel := len (seq $headerLevel) -}} {{- if lt $headerLevel $largest -}} {{- $largest = $headerLevel -}} {{- end -}} {{- end -}} {{- $firstHeaderLevel := len (seq (index (findRE \u0026#34;[1-6]\u0026#34; (index $headers 0) 1) 0)) -}} {{- $.Scratch.Set \u0026#34;bareul\u0026#34; slice -}} \u0026lt;ul\u0026gt; {{- range seq (sub $firstHeaderLevel $largest) -}} \u0026lt;ul\u0026gt; {{- $.Scratch.Add \u0026#34;bareul\u0026#34; (sub (add $largest .) 1) -}} {{- end -}} {{- range $i, $header := $headers -}} {{- $headerLevel := index (findRE \u0026#34;[1-6]\u0026#34; . 1) 0 -}} {{- $headerLevel := len (seq $headerLevel) -}} {{/* get id=\u0026#34;xyz\u0026#34; */}} {{- $id := index (findRE \u0026#34;(id=\\\u0026#34;(.*?)\\\u0026#34;)\u0026#34; $header 9) 0 }} {{- /* strip id=\u0026#34;\u0026#34; to leave xyz, no way to get regex capturing groups in hugo */ -}} {{- $cleanedID := replace (replace $id \u0026#34;id=\\\u0026#34;\u0026#34; \u0026#34;\u0026#34;) \u0026#34;\\\u0026#34;\u0026#34; \u0026#34;\u0026#34; }} {{- $header := replaceRE \u0026#34;\u0026lt;h[1-6].*?\u0026gt;((.|\\n])+?)\u0026lt;/h[1-6]\u0026gt;\u0026#34; \u0026#34;$1\u0026#34; $header -}} {{- if ne $i 0 -}} {{- $prevHeaderLevel := index (findRE \u0026#34;[1-6]\u0026#34; (index $headers (sub $i 1)) 1) 0 -}} {{- $prevHeaderLevel := len (seq $prevHeaderLevel) -}} {{- if gt $headerLevel $prevHeaderLevel -}} {{- range seq $prevHeaderLevel (sub $headerLevel 1) -}} \u0026lt;ul\u0026gt; {{/* the first should not be recorded */}} {{- if ne $prevHeaderLevel . -}} {{- $.Scratch.Add \u0026#34;bareul\u0026#34; . -}} {{- end -}} {{- end -}} {{- else -}} \u0026lt;/li\u0026gt; {{- if lt $headerLevel $prevHeaderLevel -}} {{- range seq (sub $prevHeaderLevel 1) -1 $headerLevel -}} {{- if in ($.Scratch.Get \u0026#34;bareul\u0026#34;) . -}} \u0026lt;/ul\u0026gt; {{/* manually do pop item */}} {{- $tmp := $.Scratch.Get \u0026#34;bareul\u0026#34; -}} {{- $.Scratch.Delete \u0026#34;bareul\u0026#34; -}} {{- $.Scratch.Set \u0026#34;bareul\u0026#34; slice}} {{- range seq (sub (len $tmp) 1) -}} {{- $.Scratch.Add \u0026#34;bareul\u0026#34; (index $tmp (sub . 1)) -}} {{- end -}} {{- else -}} \u0026lt;/ul\u0026gt; \u0026lt;/li\u0026gt; {{- end -}} {{- end -}} {{- end -}} {{- end }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;#{{- $cleanedID -}}\u0026#34; aria-label=\u0026#34;{{- $header | plainify -}}\u0026#34;\u0026gt;{{- $header | safeHTML -}}\u0026lt;/a\u0026gt; {{- else }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;#{{- $cleanedID -}}\u0026#34; aria-label=\u0026#34;{{- $header | plainify -}}\u0026#34;\u0026gt;{{- $header | safeHTML -}}\u0026lt;/a\u0026gt; {{- end -}} {{- end -}} \u0026lt;!-- {{- $firstHeaderLevel := len (seq (index (findRE \u0026#34;[1-6]\u0026#34; (index $headers 0) 1) 0)) -}} --\u0026gt; {{- $firstHeaderLevel := $largest }} {{- $lastHeaderLevel := len (seq (index (findRE \u0026#34;[1-6]\u0026#34; (index $headers (sub (len $headers) 1)) 1) 0)) }} \u0026lt;/li\u0026gt; {{- range seq (sub $lastHeaderLevel $firstHeaderLevel) -}} {{- if in ($.Scratch.Get \u0026#34;bareul\u0026#34;) (add . $firstHeaderLevel) }} \u0026lt;/ul\u0026gt; {{- else }} \u0026lt;/ul\u0026gt; \u0026lt;/li\u0026gt; {{- end -}} {{- end }} \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/details\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/aside\u0026gt; \u0026lt;script\u0026gt; let activeElement; let elements; window.addEventListener(\u0026#39;DOMContentLoaded\u0026#39;, function (event) { checkTocPosition(); elements = document.querySelectorAll(\u0026#39;h1[id],h2[id],h3[id],h4[id],h5[id],h6[id]\u0026#39;); // Make the first header active activeElement = elements[0]; const id = encodeURI(activeElement.getAttribute(\u0026#39;id\u0026#39;)).toLowerCase(); document.querySelector(`.inner ul li a[href=\u0026#34;#${id}\u0026#34;]`).classList.add(\u0026#39;active\u0026#39;); }, false); window.addEventListener(\u0026#39;resize\u0026#39;, function(event) { checkTocPosition(); }, false); window.addEventListener(\u0026#39;scroll\u0026#39;, () =\u0026gt; { // Check if there is an object in the top half of the screen or keep the last item active activeElement = Array.from(elements).find((element) =\u0026gt; { if ((getOffsetTop(element) - window.pageYOffset) \u0026gt; 0 \u0026amp;\u0026amp; (getOffsetTop(element) - window.pageYOffset) \u0026lt; window.innerHeight/2) { return element; } }) || activeElement elements.forEach(element =\u0026gt; { const id = encodeURI(element.getAttribute(\u0026#39;id\u0026#39;)).toLowerCase(); if (element === activeElement){ document.querySelector(`.inner ul li a[href=\u0026#34;#${id}\u0026#34;]`).classList.add(\u0026#39;active\u0026#39;); } else { document.querySelector(`.inner ul li a[href=\u0026#34;#${id}\u0026#34;]`).classList.remove(\u0026#39;active\u0026#39;); } }) }, false); const main = parseInt(getComputedStyle(document.body).getPropertyValue(\u0026#39;--article-width\u0026#39;), 10); const toc = parseInt(getComputedStyle(document.body).getPropertyValue(\u0026#39;--toc-width\u0026#39;), 10); const gap = parseInt(getComputedStyle(document.body).getPropertyValue(\u0026#39;--gap\u0026#39;), 10); function checkTocPosition() { const width = document.body.scrollWidth; if (width - main - (toc * 2) - (gap * 4) \u0026gt; 0) { document.getElementById(\u0026#34;toc-container\u0026#34;).classList.add(\u0026#34;wide\u0026#34;); } else { document.getElementById(\u0026#34;toc-container\u0026#34;).classList.remove(\u0026#34;wide\u0026#34;); } } function getOffsetTop(element) { if (!element.getClientRects().length) { return 0; } let rect = element.getBoundingClientRect(); let win = element.ownerDocument.defaultView; return rect.top + win.pageYOffset; } \u0026lt;/script\u0026gt; {{- end }} ","permalink":"https://MParnin.github.io/posts/blogconfig/","summary":"Installing/Updating Hugo Make sure installed version of Go is \u0026gt;= 1.18: Check Go version: go version Install/update Go: https://go.dev/doc/install Check Hugo: hugo version Update Hugo: Download latest version: https://github.com/gohugoio/hugo/releases Install .deb file: sudo dpkg --install ./hugo_0.110.0_linux-amd64.deb Creating a New Site Install Hugo and prerequisites: https://gohugo.io/installation/ Create two repositories on Github: \u0026ldquo;Blog Repository\u0026rdquo; - Repository for storing website code: \u0026ldquo;Blog\u0026rdquo; Make Public, no README, simply click \u0026ldquo;Create repository\u0026rdquo; \u0026ldquo;Production Repository\u0026rdquo; - Repository for deploying website that\u0026rsquo;s hosted through Github Pages: \u0026ldquo;MParnin.","title":"Blog Initial Configuration"},{"content":"This is where I\u0026rsquo;ll share my experience attending my first cybersecurity conference, BsidesCharm. I\u0026rsquo;ve volunteered for the event for the morning of both days.\n","permalink":"https://MParnin.github.io/conferences/bsidescharm2023/","summary":"This is where I\u0026rsquo;ll share my experience attending my first cybersecurity conference, BsidesCharm. I\u0026rsquo;ve volunteered for the event for the morning of both days.","title":"2023/04/29 - BSidesCharm"},{"content":"Achievements Virtual Hacking Labs Basic Certificate of Completion Certification Path TCM PNPT HackTheBox CPTS Offensive Security OSCP ","permalink":"https://MParnin.github.io/about/aboutme/","summary":"Achievements Virtual Hacking Labs Basic Certificate of Completion Certification Path TCM PNPT HackTheBox CPTS Offensive Security OSCP ","title":"About Me"},{"content":"This is currently a work-in-progress and will contain info about my Dactyl Manuform build.\nSwiches: Kailh box jade\nKey caps: Drop MT3 /DEV/TTY ortho kit\n","permalink":"https://MParnin.github.io/posts/dactylmanuform/","summary":"This is currently a work-in-progress and will contain info about my Dactyl Manuform build.\nSwiches: Kailh box jade\nKey caps: Drop MT3 /DEV/TTY ortho kit","title":"Dactyl Manuform Build"},{"content":"This will contain my write-up for HTB\u0026rsquo;s Armageddon\n1 print(\u0026#34;Hello Mom!\u0026#34;) ","permalink":"https://MParnin.github.io/write-ups/hackthebox/htb_armageddon/","summary":"This will contain my write-up for HTB\u0026rsquo;s Armageddon\n1 print(\u0026#34;Hello Mom!\u0026#34;) ","title":"HackTheBox - Armageddon"},{"content":"Hey Mom checkout my new site!\n1 print(\u0026#34;Hello Mom!\u0026#34;) ","permalink":"https://MParnin.github.io/write-ups/hackthebox/htb_bashed/","summary":"Hey Mom checkout my new site!\n1 print(\u0026#34;Hello Mom!\u0026#34;) ","title":"HackTheBox - Bashed"},{"content":"Hey Mom checkout my new site!\n1 print(\u0026#34;Hello Mom!\u0026#34;) ","permalink":"https://MParnin.github.io/write-ups/hackthebox/htb_lame/","summary":"Hey Mom checkout my new site!\n1 print(\u0026#34;Hello Mom!\u0026#34;) ","title":"HackTheBox - Lame"},{"content":"This will contain my write-up for HTB\u0026rsquo;s Armageddon\n1 print(\u0026#34;Hello Mom!\u0026#34;) ","permalink":"https://MParnin.github.io/write-ups/overthewire/otw_bandit/","summary":"This will contain my write-up for HTB\u0026rsquo;s Armageddon\n1 print(\u0026#34;Hello Mom!\u0026#34;) ","title":"OverTheWire - Bandit"},{"content":"This will contain my write-up for HTB\u0026rsquo;s Armageddon\n1 print(\u0026#34;Hello Mom!\u0026#34;) ","permalink":"https://MParnin.github.io/write-ups/tryhackme/thm_picklerick/","summary":"This will contain my write-up for HTB\u0026rsquo;s Armageddon\n1 print(\u0026#34;Hello Mom!\u0026#34;) ","title":"TryHackMe - Pickle Rick"},{"content":"This will contain my write-up for TryHackMe\u0026rsquo;s Steel Mountain.\n","permalink":"https://MParnin.github.io/write-ups/tryhackme/thm_steelmountain/","summary":"This will contain my write-up for TryHackMe\u0026rsquo;s Steel Mountain.","title":"TryHackMe - Steel Mountain"}]